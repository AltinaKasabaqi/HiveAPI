using HiveAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using HiveAPI.Modals;

namespace HiveAPI.Services.WorkSpaceServices
{
    public class WorksService : IWorksService
    {

        private readonly APIDbContext _context;

        public WorksService(APIDbContext context)
        {
            _context = context;
        }

        public async Task<int> CreateWorkSpace(WorkSpace ws)
        {
            _context.WorkSpaces.Add(ws);
            await _context.SaveChangesAsync();
            return ws.WId; // Assuming Id is the primary key generated by the database
        }

        public async System.Threading.Tasks.Task DeleteWorkSpace(int id)
        {
            var workspace = await _context.WorkSpaces.FindAsync(id);
            if (workspace != null)
            {
                _context.WorkSpaces.Remove(workspace);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<WorkSpace> GetWorkSpaceById(int id)
        {
            var ws= await _context.WorkSpaces
                                                .Include(w => w.User)
                                                .Where(w => w.WId == id)
                                                .Select(w => new WorkSpace{
                                                    WId = w.WId,
                                                    WorkspaceName = w.WorkspaceName,
                                                    WorkspaceDescription = w.WorkspaceDescription,
                                                    User = new User
                                                    {
                                                        UserId = w.User.UserId,
                                                        name = w.User.name,
                                                        email = w.User.email
                                                        
                                                    }
                                                })
                                                .FirstOrDefaultAsync(x => x.WId == id);

            

            return ws;
        }

        public async Task<List<WorkSpace>> GetWorkSpaces()
        {
            var WorkSpaces = await _context.WorkSpaces
                                               .Include(u => u.User)
                                               .ToListAsync();

            return WorkSpaces;
        }

        public async Task<List<WorkSpace>> GetWorkSpacesByUserId(int wId)
        {
            var workSpaceWithUser = await _context.WorkSpaces
                .Include(ws => ws.User) // Lidh hapësirën e punës me përdoruesin
                .Where(ws => ws.WId == wId) // Filtroni hapësirën e punës me ID specifik
                .Select(ws => new WorkSpace
                {
                    WId = ws.WId,
                    WorkspaceName = ws.WorkspaceName,
                    WorkspaceDescription = ws.WorkspaceDescription,
                    User = new User
                    {
                        UserId = ws.User.UserId,
                        name = ws.User.name,
                        email = ws.User.email
                    }
                })
                .ToListAsync();

            if (workSpaceWithUser == null)
            {
                throw new Exception("Workspace not found"); // ose kthe një NotFound() nqs preferon
            }

            return workSpaceWithUser;
        }

        public async  System.Threading.Tasks.Task UpdateWorkSpace(int id, WorkSpace workSpace)
        {
            var WorkSpace = await _context.WorkSpaces.FirstOrDefaultAsync(x => x.WId == id);

            if (WorkSpace == null)
            {
                throw new ArgumentException("List not found", nameof(id));
            }

            _context.Entry(WorkSpace).CurrentValues.SetValues(workSpace);

            
                await _context.SaveChangesAsync();
                
            
            
        }
    }
}
